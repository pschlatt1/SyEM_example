c-----------------------------------------------------------------------
c     Turbulent pipe flow 
c     Along (positive) z-direction
c     
c     Turbulence at inlet is "generated" with divergence-free 
c     synthetic eddy method (DFSyEMiso)
c     Poletto, Ruggero: Divergence free development of the synthetic eddy method 
c     in order to improve synthetic turbulence for embedded les simulations,
c     PhD Thesis, The University of Manchester, 2015
c
c     See also SEM:
c     JARRIN, Nicolas, et al. A synthetic-eddy-method for
c     generating inflow conditions for large-eddy simulations. International
c     Journal of Heat and Fluid Flow, 2006, 27. Jg., Nr. 4, S. 585-593.
c
c     Jacopo Canton,   jcanton@mech.kth.se
c     Lorenz Hufnagel, hufnagel@kth.se
c
c     This version is being updated for v19 Nek5000	
c-----------------------------------------------------------------------

      subroutine uservp (ix,iy,iz,ieg)
      return
      end

c-----------------------------------------------------------------------

      subroutine userf  (ix,iy,iz,ieg)
      return
      end

c-----------------------------------------------------------------------

      subroutine userq  (ix,iy,iz,ieg)
      return
      end

c-----------------------------------------------------------------------

      subroutine userchk
      call synthetic_eddies
      return
      end

c-----------------------------------------------------------------------

      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      use SEM, only: u_sem, v_sem, w_sem, bulk_vel_diff

      implicit none

      include 'SIZE_DEF'
      include 'SIZE'  ! L[XYZ]1,LELV
      include 'PARALLEL_DEF'
      include 'PARALLEL'  ! GLLEL
      include 'INPUT_DEF'
      include 'INPUT'  ! IF3D
      include 'NEKUSE_DEF'
      include 'NEKUSE'! U[XYZ],PA,TEMP,CBU

      integer, intent(in) :: ix,iy,iz,iside,ieg
      integer iel

c     Prescribe DFSEM inflow

      iel=gllel(ieg)
      ux= u_sem(ix,iy,iz,iel) 
      uy= v_sem(ix,iy,iz,iel) 
      uz= w_sem(ix,iy,iz,iel) + bulk_vel_diff

      temp = 0.0

      end

c-----------------------------------------------------------------------

      subroutine useric (ix,iy,iz,ieg)
      use SEM, only: nElinlet, umean_inlet
      implicit none

      include 'SIZE_DEF'
      include 'SIZE'  ! L[XYZ]1,LELV
      include 'NEKUSE_DEF'
      include 'NEKUSE'! U[XYZ], [XYZ]

      integer, intent(in) :: ix,iy,iz,ieg

      integer ex
      real vel, angle

c     Prescribe mean inflow profile used by DFSEM as IC

      ex = mod(ieg-1,nElInlet)+1 

      vel = umean_inlet(ix,iy,ex)

      Uy = 0.
      Ux = 0.
      Uz = vel


      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat
      use SEM, only: zbmin, zbmax, ybmax,
     &   sigma_max, z_inlet,
     & nEddy, yplus_cutoff, nElInlet, 
     $                 sigma_max, u0
      implicit none
      real, external :: glmin, glmax ! defined in math.f

      include 'SIZE_DEF'
      include 'SIZE' ! nelv
      include 'INPUT_DEF' 
      include 'INPUT' ! [xyz]c
      include 'TSTEP_DEF'
      include 'TSTEP' ! ISTEP,IOSTEP
      include 'PARALLEL_DEF' 
      include 'PARALLEL'        ! ISIZE, WDSIZE, LSIZE,CSIZE

      real ymax


      nEddy = 10000
      nElInlet = 68
      yplus_cutoff = 0.472384
      sigma_max = 0.5497
      u0 = 1.0
      call bcast(nEddy,ISIZE)
      call bcast(nElInlet,ISIZE)
      call bcast(yplus_cutoff, WDSIZE)
      call bcast(sigma_max, WDSIZE)
      call bcast(u0, WDSIZE)


c     Initialize DFSEM variables
      
c     The bounding "box" (actually a cylinder for the pipe)
c     is just large enough to contain the compact support of all
c     eddies. 

c     ybmin = glmin(yc,8*nelv)
      ybmax = glmax(yc,8*nelv) 
c     xbmin = glmin(xc,8*nelv)
c     xbmax = glmax(xc,8*nelv)
      z_inlet  = glmin(zc,8*nelv)


      zbmin = z_inlet - sigma_max
      zbmax = z_inlet + sigma_max

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat2

      call SEMinit
        
      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat3
      return
      end

c------------------------------------------------------------------------
